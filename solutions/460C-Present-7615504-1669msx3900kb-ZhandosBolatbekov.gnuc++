#include <iostream>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <map>
#include <set>
#include <vector>
#include <queue>
#define _ ios::sync_with_stdio(0);cin.tie(0);
#define pb push_back
#define sz size()
#define mp make_pair
#define f first
#define s second
#define all(x) x.begin(),x.end()
#define ll long long
#define MAXN 100500
#define INF 1<<30
using namespace std;

ll add[4 * MAXN], n, m, w, l, r, ans, a[MAXN];

void build(ll v, ll l, ll r)
{
	if (l == r)
		add[v] = 0;
	else
	{
		ll mid = (l + r) >> 1;
		build(v + v, l, mid);
		build(v + v + 1, mid + 1, r);
		add[v] = add[v + v] + add[v + v + 1];
	}
}

void push(ll v)
{
	if (add[v] == 0) return;
	add[v + v] += add[v];
	add[v + v + 1] += add[v];
	add[v] = 0;
}

void upd(ll v, ll l, ll r, ll L, ll R, ll x)
{
	if (r < L || R < l) return;
	if (L <= l && r <= R)
		add[v] += x;
	else
	{
		push(v);
		ll mid = (l + r) >> 1;
		upd(v + v, l, mid, L, R, x);
		upd(v + v + 1, mid + 1, r, L, R, x);
	}
}

ll get(ll v, ll l, ll r, ll pos)
{
	if (l == r) return add[v];
	else
	{
		push(v);
		ll mid = (l + r) >> 1;
		if (pos <= mid)
			return get(v + v, l, mid, pos);
		else
			return get(v + v + 1, mid + 1, r, pos);
	}
}

bool check(ll k)
{
	ll res = 0;
	build(1, 1, n);
	for (ll i = 1; i <= n; i++)
	{
		ll val = get(1, 1, n, i) + a[i];
		if (val < k)
		{
			upd(1, 1, n, i, min(n, i + w - 1), k - val);
			res += k - val;
		}
	}
	return res <= m;
}

int main()
{ _
	#ifndef ONLINE_JUDGE
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	#endif
		cin >> n >> m >> w;
		for (ll i = 1; i <= n; i++)
			cin >> a[i];
		l = 0, r = (ll)1e9 + MAXN;
		while (l <= r) 
		{
			ll mid = (l + r) >> 1;
			if (check(mid))
			{
				ans = mid;
				l = mid + 1;
			}
			else
				r = mid - 1;
		}
		cout << ans;
	return 0;
}
